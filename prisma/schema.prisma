// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ER図からモデルを定義
model WorkCategory {
  id           String   @id @default(uuid())
  name         String
  display_order Int
  created_at    DateTime @default(now())
  works        Work[]

  @@map("mst_work_categories")
}

model Work {
  id              String            @id @default(uuid())
  category_id      String
  title           String
  year            Int?
  description     String?
  officialUrl     String?
  xUrl            String?
  instagramUrl    String?
  created_at       DateTime          @default(now())
  category        WorkCategory      @relation(fields: [category_id], references: [id])
  broadcastChannels BroadcastChannel[]
  workRoles       WorkRole[]
  schedules       Schedule[]
  videos          Video[]
  workPerformers  WorkPerformer[]
  workStaff       WorkStaff[]
  parentRelations RelatedWork[]    @relation("ParentWork")
  childRelations  RelatedWork[]    @relation("ChildWork")
  workSeries      WorkSeries[]

  @@map("works")
}

// 既存のBroadcastStationモデルに新しいリレーションを追加
model BroadcastStation {
  id           String            @id @default(uuid())
  name         String
  typeId       String
  officialUrl  String?
  display_order Int
  created_at    DateTime          @default(now())
  type         StationType       @relation(fields: [typeId], references: [id])
  channels     BroadcastChannel[]
  schedules    Schedule[]        // 新規追加

  @@map("mst_broadcast_stations")
}

model StationType {
  id           String             @id @default(uuid())
  name         String
  display_order Int
  created_at    DateTime           @default(now())
  stations     BroadcastStation[]

  @@map("mst_station_types")
}

model Weekday {
  id           String             @id @default(uuid())
  name         String
  short_name    String
  code         String
  display_order Int
  created_at    DateTime           @default(now())
  channels     BroadcastChannel[]

  @@map("mst_weekdays")
}

model BroadcastChannel {
  id                  String           @id @default(uuid())
  workId              String
  stationId           String
  weekdayId           String?
  broadcastTime       DateTime?        @db.Time()
  displayBroadcastTime String?
  broadcastStartDate  DateTime         @db.Date()
  broadcastEndDate    DateTime?        @db.Date()
  pageUrl             String?
  description         String?
  created_at           DateTime         @default(now())
  work                Work             @relation(fields: [workId], references: [id])
  station             BroadcastStation @relation(fields: [stationId], references: [id])
  weekday             Weekday?         @relation(fields: [weekdayId], references: [id])

  @@map("rel_broadcast_channels")
}

model Role {
  id        String     @id @default(uuid())
  name      String
  actorId   String?
  birthday  String?
  seriesName String?
  created_at DateTime   @default(now())
  actor     Actor?     @relation(fields: [actorId], references: [id])
  workRoles WorkRole[]

  @@map("mst_roles")
}

model Actor {
  id           String   @id @default(uuid())
  name         String
  officialUrl  String?
  xUrl         String?
  instagramUrl String?
  created_at    DateTime @default(now())
  roles        Role[]

  @@map("mst_actors")
}

model WorkRole {
  id          String   @id @default(uuid())
  work_id      String
  role_id      String
  is_main_role  Boolean
  display_order Int
  created_at   DateTime @default(now())
  work        Work     @relation(fields: [work_id], references: [id])
  role        Role     @relation(fields: [role_id], references: [id])

  @@map("rel_work_roles")
}

model ScheduleCategory {
  id           String     @id @default(uuid())
  name         String
  colorCode    String
  hasPeriod    Boolean
  hasPerformances Boolean
  display_order Int
  created_at    DateTime   @default(now())
  schedules    Schedule[]

  @@map("mst_schedule_categories")
}

model Prefecture {
  id           String   @id @default(uuid())
  name         String
  region       String
  code         String
  display_order Int
  created_at    DateTime @default(now())
  venues       Venue[]

  @@map("mst_prefectures")
}

model Venue {
  id           String     @id @default(uuid())
  name         String
  postal_code   String?
  prefecture_id String
  address      String?
  capacity     String?
  official_url  String?
  google_maps_url String?
  display_order Int
  created_at    DateTime   @default(now())
  prefecture   Prefecture @relation(fields: [prefecture_id], references: [id])
  schedules    Schedule[]

  @@map("mst_venues")
}

model Schedule {
  id                String              @id @default(uuid())
  category_id        String
  work_id            String?
  series_id          String?
  venue_id           String?             // Nullableに変更
  broadcast_station_id String?            @map("broadcast_station_id") // 新規追加
  title             String
  start_date         DateTime            @db.Date()
  end_date           DateTime?           @db.Date()
  is_all_day          Boolean
  description       String?
  official_url       String?
  x_url              String?
  instagram_url      String?
  created_at         DateTime            @default(now())
  category          ScheduleCategory    @relation(fields: [category_id], references: [id])
  work              Work?               @relation(fields: [work_id], references: [id])
  venue             Venue?              @relation(fields: [venue_id], references: [id])
  broadcastStation  BroadcastStation?   @relation(fields: [broadcast_station_id], references: [id]) // 新規関連
  performances      SchedulePerformance[]
  performers        SchedulePerformer[]

  @@map("schedules")
}

model SchedulePerformance {
  id              String   @id @default(uuid())
  schedule_id      String
  performance_date DateTime @db.Date()
  start_time       DateTime? @db.Time()
  end_time         DateTime? @db.Time()
  display_start_time String?
  display_end_time  String?
  subtitle        String?
  description     String?
  display_order    Int
  created_at       DateTime @default(now())
  schedule        Schedule @relation(fields: [schedule_id], references: [id])

  @@map("rel_schedule_performances")
}

model Performer {
  id            String              @id @default(uuid())
  name          String
  is_takuya_sato  Boolean
  official_url   String?
  x_url          String?
  instagram_url  String?
  created_at     DateTime            @default(now())
  workPerformers WorkPerformer[]
  schedulePerformers SchedulePerformer[]

  @@map("mst_performers")
}

model WorkPerformer {
  id             String    @id @default(uuid())
  work_id         String
  performer_id    String
  role_description String?
  display_order   Int
  created_at      DateTime  @default(now())
  work           Work      @relation(fields: [work_id], references: [id])
  performer      Performer @relation(fields: [performer_id], references: [id])

  @@map("rel_work_performers")
}

model SchedulePerformer {
  id             String    @id @default(uuid())
  schedule_id     String
  performer_id    String
  role_description String?
  display_order   Int
  created_at      DateTime  @default(now())
  schedule       Schedule  @relation(fields: [schedule_id], references: [id])
  performer      Performer @relation(fields: [performer_id], references: [id])

  @@map("rel_schedule_performers")
}

model Staff {
  id           String      @id @default(uuid())
  name         String
  officialUrl  String?
  xUrl         String?
  instagramUrl String?
  created_at    DateTime    @default(now())
  workStaff    WorkStaff[]

  @@map("mst_staff")
}

model StaffRole {
  id           String      @id @default(uuid())
  name         String
  display_order Int
  created_at    DateTime    @default(now())
  workStaff    WorkStaff[]

  @@map("mst_staff_roles")
}

model WorkStaff {
  id          String    @id @default(uuid())
  workId      String
  staffId     String
  staff_role_id String
  description String?
  display_order Int
  created_at   DateTime  @default(now())
  work        Work      @relation(fields: [workId], references: [id])
  staff       Staff     @relation(fields: [staffId], references: [id])
  staffRole   StaffRole @relation(fields: [staff_role_id], references: [id])

  @@map("rel_work_staff")
}

model Video {
  id           String   @id @default(uuid())
  workId       String?  @map("work_id")
  title        String
  videoUrl     String   @map("video_url")
  publishedAt  DateTime @db.Date() @map("published_at")
  created_at   DateTime @default(now())
  work         Work?    @relation(fields: [workId], references: [id])

  @@map("videos")
}

model Series {
  id           String      @id @default(uuid())
  name         String
  description  String?
  officialUrl  String?
  xUrl         String?
  instagramUrl String?
  display_order Int
  created_at    DateTime    @default(now())
  workSeries   WorkSeries[]

  @@map("mst_series")
}

model WorkSeries {
  id             String   @id @default(uuid())
  seriesId       String
  workId         String
  sequenceNumber Int?
  subtitle       String?
  display_order   Int
  created_at      DateTime @default(now())
  series         Series   @relation(fields: [seriesId], references: [id])
  work           Work     @relation(fields: [workId], references: [id])

  @@map("rel_work_series")
}

model WorkRelationType {
  id           String        @id @default(uuid())
  name         String
  display_order Int
  created_at    DateTime      @default(now())
  relatedWorks RelatedWork[]

  @@map("mst_work_relation_types")
}

model RelatedWork {
  id             String          @id @default(uuid())
  parentWorkId   String
  childWorkId    String
  relationTypeId String
  description    String?
  display_order   Int
  created_at      DateTime        @default(now())
  parentWork     Work            @relation("ParentWork", fields: [parentWorkId], references: [id])
  childWork      Work            @relation("ChildWork", fields: [childWorkId], references: [id])
  relationType   WorkRelationType @relation(fields: [relationTypeId], references: [id])

  @@map("rel_related_works")
}